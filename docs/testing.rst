Testing
=======

Overview
--------

The `django-socio-grpc` is a powerful library that serves as a layer on top of the Django Rest Framework (DRF). It is designed to enhance the capabilities of Django and DRF, providing additional functionality and features.

When it comes to testing, `django-socio-grpc` follows the same conventions as Django and DRF. It utilizes the `unittest` library, a built-in Python module for testing. This allows for the creation of robust and comprehensive unit tests, ensuring the reliability and stability of the codebase.

The following sections will guide you through the process of writing and running tests for `django-socio-grpc`.

Writing Tests
-------------

Let's imagine a dummy service for a model Post

  .. code-block:: python
    
    # quickstrart/services.py
    from django_filters.rest_framework import DjangoFilterBackend
    from django_socio_grpc.generics import AsyncModelService

    from quickstart.models import Post
    from quickstart.serializer import PostProtoSerializer

    # AsyncModelService implements basic crud functionnalities
    class PostService(AsyncModelService):
        queryset = Post.objects.all()
        serializer_class = PostProtoSerializer
        filter_backends = [DjangoFilterBackend]
        filterset_fields = ["headline"]


The following is a basic structure for your testing class:

  .. code-block:: python

    # quickstrart/tests.py
    from django.test import TestCase
    from .post.services.post_service import PostService
    from .post.grpc import post_pb2
    from .post.grpc.post_pb2_grpc import (
        PostControllerStub,
        add_PostControllerServicer_to_server,
    )
    from .grpc_test_utils.fake_grpc import FakeFullAIOGRPC
    
    class TestPost(TestCase):
        def setup(self):
            self.fake_grpc = FakeFullAIOGRPC(
                add_PostControllerServicer_to_server,
                PostService.as_servicer(),
            )

        def tearDown(self):
            self.fake_grpc.close()

Now, let's dissect the `TestPost` class:

- We recommend using `TestCase` from `django.test` for testing your service.
- The `setup` method should instantiate a `FakeFullAIOGRPC`.
- `FakeFullAIOGRPC` is initialized with two parameters: a function to add a servicer to a server, and the servicer itself. In this case, `add_PostControllerServicer_to_server` is the function generated by gRPC that adds a `PostService` servicer to a server.
- When you create an instance of `FakeFullAIOGRPC`, it sets up a mock gRPC server with your servicer. This allows you to make calls to your servicer methods as if they were being handled by a real gRPC server.
- The close method is used to clean up after your tests are done. It stops the mock gRPC server and releases any resources it was using.

Testing common functionnalities:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here are some important test files in the `sociodjango-socio-grpc` project:

- `Testing actions <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_actions.py>`_: This file contains tests for the action functionality.

- `Testing basic async service <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_async_basic_service.py>`_: This file tests the basic asynchronous service.

- `Testing async exception <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_async_exception.py>`_: This file contains tests for handling exceptions in asynchronous services.

- `Testing basic mixin <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_basic_mixins.py>`_: This file tests the basic mixins used in the project.

- `Testing filtering <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_filtering.py>`_: This file contains tests for the filtering functionality.

- `Testing pagination <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_pagination.py>`_: This file tests the pagination functionality.

- `Testing permissions <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_permissions.py>`_: This file contains tests for the permissions functionality.

- `Testing placeholders <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_placeholders.py>`_: This file tests the placeholder functionality.

- `Testing auth <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_authentication.py>`_: This file contains tests for the authentication functionality.

- `Testing auth without session middleware <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_auth_without_session_middleware.py>`_: This file tests the authentication functionality without using session middleware.

- `Testing async stream <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_async_stream_in.py>`_: This file tests the asynchronous streaming functionality.

- `Testing local middleware <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_locale_middleware.py>`_: This file tests the locale middleware.

- `Testing legacy django middleware <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_legacy_django_middlewares.py>`_: This file tests the legacy Django middleware.

- `Testing proto generation <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_proto_generation.py>`_: This file tests the protobuf generation functionality.

- `Testing protobuf registration <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_protobuf_registration.py>`_: This file tests the registration of protobufs.

- `Testing app handler registration <https://github.com/socotecio/django-socio-grpc/blob/master/django_socio_grpc/tests/test_app_handler_registry.py>`_: This file tests the registration of app handlers.

Running Tests
-------------

To run tests on your application, it is advised to install `pytest` and `pytest-django`. The installation instructions can be found in the `pytest-django tutorial <https://pytest-django.readthedocs.io/en/latest/tutorial.html>`_.

Verify your installation by checking the `pytest` version:

.. code-block:: bash

  pytest --version

Create a test file named `quickstart/tests.py`. Follow the instructions provided earlier in this document for guidance on how to structure your first test.

Run your tests with the following command:

.. code-block:: bash

  pytest

For more details on `pytest` and `unittest`, refer to the `pytest documentation <https://pytest-django.readthedocs.io/en/latest/>`_ and `unittest documentation <https://docs.python.org/3/library/unittest.html>`_ respectively.